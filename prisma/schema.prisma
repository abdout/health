// prisma/schema.prisma

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

enum Gender {
  Male
  Female
}

enum Status {
  pending
  scheduled
  cancelled
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  phone         String?   // Added phone field
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      String[]  // Array of Account IDs
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation String? // ID of TwoFactorConfirmation
  onboarded             Boolean                @default(false)
  patients              Patient[]
  appointments          Appointment[]          @relation("UserAppointments")
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}


model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @unique
}

model Patient {
  id                      String        @id @default(auto()) @map("_id") @db.ObjectId
  userId                  String        @db.ObjectId
  user                    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                    String
  email                   String
  phone                   String
  birthDate               DateTime
  gender                  Gender
  address                 String
  occupation              String
  emergencyContactName    String
  emergencyContactNumber  String
  primaryPhysician        String
  insuranceProvider       String
  insurancePolicyNumber   String
  allergies               String?
  currentMedication       String?
  familyMedicalHistory    String?
  pastMedicalHistory      String?
  identificationType      String?
  identificationNumber    String?
  identificationDocument  String?       // Store file path or URL
  privacyConsent          Boolean
  appointments            Appointment[] @relation("PatientAppointments")
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
}

model Appointment {
  id                  String      @id @default(auto()) @map("_id") @db.ObjectId
  patientId           String      @db.ObjectId
  patient             Patient     @relation(fields: [patientId], references: [id], onDelete: Cascade, name: "PatientAppointments")
  userId              String      @db.ObjectId
  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserAppointments")
  schedule            DateTime
  status              Status
  primaryPhysician    String
  reason              String
  note                String
  cancellationReason  String?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}
